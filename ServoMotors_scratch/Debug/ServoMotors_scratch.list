
ServoMotors_scratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003dc  080003e4  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003dc  080003dc  000013e4  2**0
                  CONTENTS
  4 .ARM          00000000  080003dc  080003dc  000013e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003dc  080003e4  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003dc  080003dc  000013dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e0  080003e0  000013e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000432  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000111  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003e  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fd1  00000000  00000000  000019f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000516  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003f96  00000000  00000000  00002edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006e73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00006eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00006f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003c4 	.word	0x080003c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003c4 	.word	0x080003c4

080001d8 <main>:
void TIM2_Init(void);
void TIM4_ms_Delay(uint32_t delay);


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    RCC->CFGR |= 0<<10; // set APB1 = 16 MHz
 80001dc:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <main+0x5c>)
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <main+0x5c>)
 80001e0:	689b      	ldr	r3, [r3, #8]
 80001e2:	6093      	str	r3, [r2, #8]
    GPIO_Init();
 80001e4:	f000 f828 	bl	8000238 <GPIO_Init>
    TIM2_Init();
 80001e8:	f000 f842 	bl	8000270 <TIM2_Init>
    TIM2->CR1 |= 1;
 80001ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]
    while(1){

        if(TIM2->CCR1 < 2500){
 80001fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000202:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000206:	4293      	cmp	r3, r2
 8000208:	d80a      	bhi.n	8000220 <main+0x48>
            TIM2->CCR1 = TIM2->CCR1 + 50;
 800020a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800020e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000214:	3332      	adds	r3, #50	@ 0x32
 8000216:	6353      	str	r3, [r2, #52]	@ 0x34
            TIM4_ms_Delay(10);
 8000218:	200a      	movs	r0, #10
 800021a:	f000 f855 	bl	80002c8 <TIM4_ms_Delay>
 800021e:	e7ed      	b.n	80001fc <main+0x24>
        }
        else{
            TIM2->CCR1 = 500;
 8000220:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000224:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000228:	635a      	str	r2, [r3, #52]	@ 0x34
            TIM4_ms_Delay(10);
 800022a:	200a      	movs	r0, #10
 800022c:	f000 f84c 	bl	80002c8 <TIM4_ms_Delay>
        if(TIM2->CCR1 < 2500){
 8000230:	e7e4      	b.n	80001fc <main+0x24>
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800

08000238 <GPIO_Init>:
        }
    }
}


void GPIO_Init(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= 1; //Enable GPIOA clock
 800023c:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <GPIO_Init+0x30>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a09      	ldr	r2, [pc, #36]	@ (8000268 <GPIO_Init+0x30>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= 0x00100000; // Select the PA5 pin in alternate function mode
 8000248:	4b08      	ldr	r3, [pc, #32]	@ (800026c <GPIO_Init+0x34>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a07      	ldr	r2, [pc, #28]	@ (800026c <GPIO_Init+0x34>)
 800024e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000800; //Set the PA5 pin alternate function
 8000254:	4b05      	ldr	r3, [pc, #20]	@ (800026c <GPIO_Init+0x34>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a04      	ldr	r2, [pc, #16]	@ (800026c <GPIO_Init+0x34>)
 800025a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800025e:	6013      	str	r3, [r2, #0]

}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000

08000270 <TIM2_Init>:

void TIM2_Init(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

    RCC->APB1ENR |=1;
 8000274:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <TIM2_Init+0x54>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000278:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <TIM2_Init+0x54>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 16-1; //Setting the clock frequency to 1MHz.
 8000280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000284:	220f      	movs	r2, #15
 8000286:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20000; // Total period of the timer
 8000288:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800028c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000290:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;
 8000292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000296:	2200      	movs	r2, #0
 8000298:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->CCMR1 = 0x0060; //PWM mode for the timer
 800029a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029e:	2260      	movs	r2, #96	@ 0x60
 80002a0:	619a      	str	r2, [r3, #24]
    TIM2->CCER |= 1; //Enable channel 1 as output
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a6:	6a1b      	ldr	r3, [r3, #32]
 80002a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6213      	str	r3, [r2, #32]
    TIM2->CCR1 = 500; // Pulse width for PWM
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002ba:	635a      	str	r2, [r3, #52]	@ 0x34


}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800

080002c8 <TIM4_ms_Delay>:

void TIM4_ms_Delay(uint32_t delay){
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1<<2; //Start the clock for the timer peripheral
 80002d0:	4b13      	ldr	r3, [pc, #76]	@ (8000320 <TIM4_ms_Delay+0x58>)
 80002d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d4:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <TIM4_ms_Delay+0x58>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM4->PSC = 16000-1; //Setting the clock frequency to 1kHz.
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 80002de:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002e2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = (delay); // Total period of the timer
 80002e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CR1 |= 1; //Start the Timer
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
	while(!(TIM4->SR & TIM_SR_UIF)){} //Polling the update interrupt flag
 80002fc:	bf00      	nop
 80002fe:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <TIM4_ms_Delay+0x36>
	TIM4->SR &= ~(0x0001); //Reset the update interrupt flag
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <TIM4_ms_Delay+0x5c>)
 8000310:	f023 0301 	bic.w	r3, r3, #1
 8000314:	6113      	str	r3, [r2, #16]

}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40023800 	.word	0x40023800
 8000324:	40000800 	.word	0x40000800

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f811 	bl	800037c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035a:	f7ff ff3d 	bl	80001d8 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	080003e4 	.word	0x080003e4
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	2000001c 	.word	0x2000001c

08000378 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <__libc_init_array>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4d0d      	ldr	r5, [pc, #52]	@ (80003b4 <__libc_init_array+0x38>)
 8000380:	4c0d      	ldr	r4, [pc, #52]	@ (80003b8 <__libc_init_array+0x3c>)
 8000382:	1b64      	subs	r4, r4, r5
 8000384:	10a4      	asrs	r4, r4, #2
 8000386:	2600      	movs	r6, #0
 8000388:	42a6      	cmp	r6, r4
 800038a:	d109      	bne.n	80003a0 <__libc_init_array+0x24>
 800038c:	4d0b      	ldr	r5, [pc, #44]	@ (80003bc <__libc_init_array+0x40>)
 800038e:	4c0c      	ldr	r4, [pc, #48]	@ (80003c0 <__libc_init_array+0x44>)
 8000390:	f000 f818 	bl	80003c4 <_init>
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	2600      	movs	r6, #0
 800039a:	42a6      	cmp	r6, r4
 800039c:	d105      	bne.n	80003aa <__libc_init_array+0x2e>
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a4:	4798      	blx	r3
 80003a6:	3601      	adds	r6, #1
 80003a8:	e7ee      	b.n	8000388 <__libc_init_array+0xc>
 80003aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ae:	4798      	blx	r3
 80003b0:	3601      	adds	r6, #1
 80003b2:	e7f2      	b.n	800039a <__libc_init_array+0x1e>
 80003b4:	080003dc 	.word	0x080003dc
 80003b8:	080003dc 	.word	0x080003dc
 80003bc:	080003dc 	.word	0x080003dc
 80003c0:	080003e0 	.word	0x080003e0

080003c4 <_init>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr

080003d0 <_fini>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr
